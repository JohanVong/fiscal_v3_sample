// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: enum.proto

package kkm_proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
// @brief Команды.
//
// Функционал взаимодействия ККМ и сервера описывается набором этих команд.
type CommandTypeEnum int32

const (
	/// Отправка серверу служебного пакета.
	CommandTypeEnum_COMMAND_SYSTEM CommandTypeEnum = 0
	/// Отправка данных чека на сервер и обратное получение номера чека.
	CommandTypeEnum_COMMAND_TICKET CommandTypeEnum = 1
	/// Закрытие смены.
	CommandTypeEnum_COMMAND_CLOSE_SHIFT CommandTypeEnum = 2
	/// Запрос на получение X, Z или иных отчетов.
	CommandTypeEnum_COMMAND_REPORT CommandTypeEnum = 3
	/// Запрос на загрузку текущей версии номенклатуры.
	CommandTypeEnum_COMMAND_NOMENCLATURE CommandTypeEnum = 4
	/// Запрос на получение информации о кассе.
	CommandTypeEnum_COMMAND_INFO CommandTypeEnum = 5
	/// Внесение и снятие наличных денежных средств.
	CommandTypeEnum_COMMAND_MONEY_PLACEMENT CommandTypeEnum = 6
	/// Отмена последней команды COMMAND_TICKET.
	CommandTypeEnum_COMMAND_CANCEL_TICKET CommandTypeEnum = 7
	/// Запрос на авторизацию в системе.
	CommandTypeEnum_COMMAND_AUTH CommandTypeEnum = 8
	/// Зарезервировано
	CommandTypeEnum_COMMAND_RESERVED CommandTypeEnum = 127
)

// Enum value maps for CommandTypeEnum.
var (
	CommandTypeEnum_name = map[int32]string{
		0:   "COMMAND_SYSTEM",
		1:   "COMMAND_TICKET",
		2:   "COMMAND_CLOSE_SHIFT",
		3:   "COMMAND_REPORT",
		4:   "COMMAND_NOMENCLATURE",
		5:   "COMMAND_INFO",
		6:   "COMMAND_MONEY_PLACEMENT",
		7:   "COMMAND_CANCEL_TICKET",
		8:   "COMMAND_AUTH",
		127: "COMMAND_RESERVED",
	}
	CommandTypeEnum_value = map[string]int32{
		"COMMAND_SYSTEM":          0,
		"COMMAND_TICKET":          1,
		"COMMAND_CLOSE_SHIFT":     2,
		"COMMAND_REPORT":          3,
		"COMMAND_NOMENCLATURE":    4,
		"COMMAND_INFO":            5,
		"COMMAND_MONEY_PLACEMENT": 6,
		"COMMAND_CANCEL_TICKET":   7,
		"COMMAND_AUTH":            8,
		"COMMAND_RESERVED":        127,
	}
)

func (x CommandTypeEnum) Enum() *CommandTypeEnum {
	p := new(CommandTypeEnum)
	*p = x
	return p
}

func (x CommandTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[0].Descriptor()
}

func (CommandTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[0]
}

func (x CommandTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommandTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommandTypeEnum(num)
	return nil
}

// Deprecated: Use CommandTypeEnum.Descriptor instead.
func (CommandTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{0}
}

//*
// @brief Коды ответов.
//
// Сервер отвечает всегда с тем же кодом команды, с которым устройство
// обратилось к нему. Дополнительно сервер отсылает специальную структуру
// данных, содержащую код ответа и данные, специфичные для данного кода,
// если они необходимы. Список кодов ответа общего характера перечислен здесь.
// Специфические коды ответов для конкретных команд описаны в соответствующих
// перечислениях.
type ResultTypeEnum int32

const (
	/// Команда выполнена успешно.
	///
	/// Касса работает в штатном режиме.
	ResultTypeEnum_RESULT_TYPE_OK ResultTypeEnum = 0

	/// Неизвестный ID устройства
	///
	/// Аппарат не зарегистрирован в системе.
	ResultTypeEnum_RESULT_TYPE_UNKNOWN_ID ResultTypeEnum = 1

	/// Неверный токен.
	///
	/// Отправка данных невозможна, необходимо произвести сброс токена.
	ResultTypeEnum_RESULT_TYPE_INVALID_TOKEN ResultTypeEnum = 2

	/// Ошибка протокола.
	///
	/// Касса обратилась к серверу с неправильно сформированным запросом.
	/// Может возникать, например, при несовместимости версий протоколов.
	ResultTypeEnum_RESULT_TYPE_PROTOCOL_ERROR ResultTypeEnum = 3

	/// Неизвестная команда.
	///
	/// ККМ обратился с кодом команды, неизвестном серверу.
	ResultTypeEnum_RESULT_TYPE_UNKNOWN_COMMAND ResultTypeEnum = 4

	/// Команда не поддерживается.
	///
	/// ККМ обратился с кодом команды, функциональность которой недоступна
	/// клиенту.@endlink
	ResultTypeEnum_RESULT_TYPE_UNSUPPORTED_COMMAND ResultTypeEnum = 5

	/// Неверные настройки устройства.
	///
	/// В настоящее время не поддерживается.
	ResultTypeEnum_RESULT_TYPE_INVALID_CONFIGURATION ResultTypeEnum = 6

	/// Использование SSL не разрешено.
	///
	/// Использование защищенного соединения запрещено. Необходимо подключить
	/// услугу или использовать открытый канал связи.
	ResultTypeEnum_RESULT_TYPE_SSL_IS_NOT_ALLOWED ResultTypeEnum = 7

	/// Неправильный номер запроса.
	///@endlink
	/// Порядковый номер запроса REQNUM тот же, что
	/// и в предыдущем запросе, но TOKEN другой.
	ResultTypeEnum_RESULT_TYPE_INVALID_REQUEST_NUMBER ResultTypeEnum = 8

	/// Неправильная попытка отправки повторного запроса.
	///
	/// REQNUM и TOKEN имеют те же значения, что и в предыдущем запросе,
	/// но код команды отличается.
	ResultTypeEnum_RESULT_TYPE_INVALID_RETRY_REQUEST ResultTypeEnum = 9

	/// Невозможно сделать отмену чека.
	///
	/// Можно отменить только последний чек, и при этом после этого чека не было
	/// отправлено ни одной команды, кроме служебной.
	/// @deprecated используйте CancelTicketResponse.
	ResultTypeEnum_RESULT_TYPE_CANT_CANCEL_TICKET ResultTypeEnum = 10

	/// Время открытой смены истекло.
	///
	/// Если истек период, в течение которого смена может быть открыта, то сервер
	/// будет возвращать эту ошибку, пока не закроется смена.
	ResultTypeEnum_RESULT_TYPE_OPEN_SHIFT_TIMEOUT_EXPIRED ResultTypeEnum = 11

	/// Неправильное имя или пароль.
	///
	///@deprecated используйте AuthResponse.
	ResultTypeEnum_RESULT_TYPE_INVALID_LOGIN_PASSWORD ResultTypeEnum = 12

	/// Неверные входные данные.
	///
	/// Для случаев, когда данные корректны с точки зрения протокола, но не верны
	/// в конкретном контексте.
	ResultTypeEnum_RESULT_TYPE_INCORRECT_REQUEST_DATA ResultTypeEnum = 13

	/// Недостаточно наличных.
	///
	/// Указывает на недостаточность наличных в кассе во время расходных операций.
	ResultTypeEnum_RESULT_TYPE_NOT_ENOUGH_CASH ResultTypeEnum = 14

	/// Касса заблокирована.
	ResultTypeEnum_RESULT_TYPE_BLOCKED ResultTypeEnum = 15

	/// Совпадает значение ИИН/БИН покупателя и продавца.
	ResultTypeEnum_RESULT_TYPE_SAME_TAXPAYER_AND_CUSTOMER ResultTypeEnum = 17

	/// Сервис временно недоступен.enum ReportTypeEnum {
	///
	/// Касса должна разорвать соединение, и далее пытаться соединяться и
	/// отправлять данные в течение общего времени на обработку
	/// транзакции, по истечении которого устройство должно разорвать
	/// соединение, перейти в аварийный режим и выдать соответствующее сообщение.
	ResultTypeEnum_RESULT_TYPE_SERVICE_TEMPORARILY_UNAVAILABLE ResultTypeEnum = 254

	/// Неизвестная ошибка.
	///
	/// Касса должна разорвать соединение и далее пытаться соединяться и отправлять
	/// данные в течение общего времени на обработку транзакции,
	// по истечении которого устройство должно разорвать
	/// соединение и выдать соответствующее сообщение.
	ResultTypeEnum_RESULT_TYPE_UNKNOWN_ERROR ResultTypeEnum = 255
)

// Enum value maps for ResultTypeEnum.
var (
	ResultTypeEnum_name = map[int32]string{
		0:   "RESULT_TYPE_OK",
		1:   "RESULT_TYPE_UNKNOWN_ID",
		2:   "RESULT_TYPE_INVALID_TOKEN",
		3:   "RESULT_TYPE_PROTOCOL_ERROR",
		4:   "RESULT_TYPE_UNKNOWN_COMMAND",
		5:   "RESULT_TYPE_UNSUPPORTED_COMMAND",
		6:   "RESULT_TYPE_INVALID_CONFIGURATION",
		7:   "RESULT_TYPE_SSL_IS_NOT_ALLOWED",
		8:   "RESULT_TYPE_INVALID_REQUEST_NUMBER",
		9:   "RESULT_TYPE_INVALID_RETRY_REQUEST",
		10:  "RESULT_TYPE_CANT_CANCEL_TICKET",
		11:  "RESULT_TYPE_OPEN_SHIFT_TIMEOUT_EXPIRED",
		12:  "RESULT_TYPE_INVALID_LOGIN_PASSWORD",
		13:  "RESULT_TYPE_INCORRECT_REQUEST_DATA",
		14:  "RESULT_TYPE_NOT_ENOUGH_CASH",
		15:  "RESULT_TYPE_BLOCKED",
		17:  "RESULT_TYPE_SAME_TAXPAYER_AND_CUSTOMER",
		254: "RESULT_TYPE_SERVICE_TEMPORARILY_UNAVAILABLE",
		255: "RESULT_TYPE_UNKNOWN_ERROR",
	}
	ResultTypeEnum_value = map[string]int32{
		"RESULT_TYPE_OK":                              0,
		"RESULT_TYPE_UNKNOWN_ID":                      1,
		"RESULT_TYPE_INVALID_TOKEN":                   2,
		"RESULT_TYPE_PROTOCOL_ERROR":                  3,
		"RESULT_TYPE_UNKNOWN_COMMAND":                 4,
		"RESULT_TYPE_UNSUPPORTED_COMMAND":             5,
		"RESULT_TYPE_INVALID_CONFIGURATION":           6,
		"RESULT_TYPE_SSL_IS_NOT_ALLOWED":              7,
		"RESULT_TYPE_INVALID_REQUEST_NUMBER":          8,
		"RESULT_TYPE_INVALID_RETRY_REQUEST":           9,
		"RESULT_TYPE_CANT_CANCEL_TICKET":              10,
		"RESULT_TYPE_OPEN_SHIFT_TIMEOUT_EXPIRED":      11,
		"RESULT_TYPE_INVALID_LOGIN_PASSWORD":          12,
		"RESULT_TYPE_INCORRECT_REQUEST_DATA":          13,
		"RESULT_TYPE_NOT_ENOUGH_CASH":                 14,
		"RESULT_TYPE_BLOCKED":                         15,
		"RESULT_TYPE_SAME_TAXPAYER_AND_CUSTOMER":      17,
		"RESULT_TYPE_SERVICE_TEMPORARILY_UNAVAILABLE": 254,
		"RESULT_TYPE_UNKNOWN_ERROR":                   255,
	}
)

func (x ResultTypeEnum) Enum() *ResultTypeEnum {
	p := new(ResultTypeEnum)
	*p = x
	return p
}

func (x ResultTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[1].Descriptor()
}

func (ResultTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[1]
}

func (x ResultTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResultTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResultTypeEnum(num)
	return nil
}

// Deprecated: Use ResultTypeEnum.Descriptor instead.
func (ResultTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{1}
}

type ItemTypeEnum int32

const (
	ItemTypeEnum_ITEM_TYPE_COMMODITY        ItemTypeEnum = 1
	ItemTypeEnum_ITEM_TYPE_STORNO_COMMODITY ItemTypeEnum = 2
	ItemTypeEnum_ITEM_TYPE_MARKUP           ItemTypeEnum = 3
	ItemTypeEnum_ITEM_TYPE_STORNO_MARKUP    ItemTypeEnum = 4
	ItemTypeEnum_ITEM_TYPE_DISCOUNT         ItemTypeEnum = 5
	ItemTypeEnum_ITEM_TYPE_STORNO_DISCOUNT  ItemTypeEnum = 6
)

// Enum value maps for ItemTypeEnum.
var (
	ItemTypeEnum_name = map[int32]string{
		1: "ITEM_TYPE_COMMODITY",
		2: "ITEM_TYPE_STORNO_COMMODITY",
		3: "ITEM_TYPE_MARKUP",
		4: "ITEM_TYPE_STORNO_MARKUP",
		5: "ITEM_TYPE_DISCOUNT",
		6: "ITEM_TYPE_STORNO_DISCOUNT",
	}
	ItemTypeEnum_value = map[string]int32{
		"ITEM_TYPE_COMMODITY":        1,
		"ITEM_TYPE_STORNO_COMMODITY": 2,
		"ITEM_TYPE_MARKUP":           3,
		"ITEM_TYPE_STORNO_MARKUP":    4,
		"ITEM_TYPE_DISCOUNT":         5,
		"ITEM_TYPE_STORNO_DISCOUNT":  6,
	}
)

func (x ItemTypeEnum) Enum() *ItemTypeEnum {
	p := new(ItemTypeEnum)
	*p = x
	return p
}

func (x ItemTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[2].Descriptor()
}

func (ItemTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[2]
}

func (x ItemTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemTypeEnum(num)
	return nil
}

// Deprecated: Use ItemTypeEnum.Descriptor instead.
func (ItemTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{2}
}

type MoneyPlacementEnum int32

const (
	MoneyPlacementEnum_MONEY_PLACEMENT_DEPOSIT    MoneyPlacementEnum = 0
	MoneyPlacementEnum_MONEY_PLACEMENT_WITHDRAWAL MoneyPlacementEnum = 1
)

// Enum value maps for MoneyPlacementEnum.
var (
	MoneyPlacementEnum_name = map[int32]string{
		0: "MONEY_PLACEMENT_DEPOSIT",
		1: "MONEY_PLACEMENT_WITHDRAWAL",
	}
	MoneyPlacementEnum_value = map[string]int32{
		"MONEY_PLACEMENT_DEPOSIT":    0,
		"MONEY_PLACEMENT_WITHDRAWAL": 1,
	}
)

func (x MoneyPlacementEnum) Enum() *MoneyPlacementEnum {
	p := new(MoneyPlacementEnum)
	*p = x
	return p
}

func (x MoneyPlacementEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoneyPlacementEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[3].Descriptor()
}

func (MoneyPlacementEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[3]
}

func (x MoneyPlacementEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MoneyPlacementEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MoneyPlacementEnum(num)
	return nil
}

// Deprecated: Use MoneyPlacementEnum.Descriptor instead.
func (MoneyPlacementEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{3}
}

type ReportTypeEnum int32

const (
	ReportTypeEnum_REPORT_Z ReportTypeEnum = 0
	ReportTypeEnum_REPORT_X ReportTypeEnum = 1
)

// Enum value maps for ReportTypeEnum.
var (
	ReportTypeEnum_name = map[int32]string{
		0: "REPORT_Z",
		1: "REPORT_X",
	}
	ReportTypeEnum_value = map[string]int32{
		"REPORT_Z": 0,
		"REPORT_X": 1,
	}
)

func (x ReportTypeEnum) Enum() *ReportTypeEnum {
	p := new(ReportTypeEnum)
	*p = x
	return p
}

func (x ReportTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[4].Descriptor()
}

func (ReportTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[4]
}

func (x ReportTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReportTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReportTypeEnum(num)
	return nil
}

// Deprecated: Use ReportTypeEnum.Descriptor instead.
func (ReportTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{4}
}

type DomainTypeEnum int32

const (
	DomainTypeEnum_DOMAIN_TRADING  DomainTypeEnum = 0
	DomainTypeEnum_DOMAIN_SERVICES DomainTypeEnum = 1
	DomainTypeEnum_DOMAIN_GASOIL   DomainTypeEnum = 2
	DomainTypeEnum_DOMAIN_HOTELS   DomainTypeEnum = 3
	DomainTypeEnum_DOMAIN_TAXI     DomainTypeEnum = 4
	DomainTypeEnum_DOMAIN_PARKING  DomainTypeEnum = 5
)

// Enum value maps for DomainTypeEnum.
var (
	DomainTypeEnum_name = map[int32]string{
		0: "DOMAIN_TRADING",
		1: "DOMAIN_SERVICES",
		2: "DOMAIN_GASOIL",
		3: "DOMAIN_HOTELS",
		4: "DOMAIN_TAXI",
		5: "DOMAIN_PARKING",
	}
	DomainTypeEnum_value = map[string]int32{
		"DOMAIN_TRADING":  0,
		"DOMAIN_SERVICES": 1,
		"DOMAIN_GASOIL":   2,
		"DOMAIN_HOTELS":   3,
		"DOMAIN_TAXI":     4,
		"DOMAIN_PARKING":  5,
	}
)

func (x DomainTypeEnum) Enum() *DomainTypeEnum {
	p := new(DomainTypeEnum)
	*p = x
	return p
}

func (x DomainTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[5].Descriptor()
}

func (DomainTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[5]
}

func (x DomainTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DomainTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DomainTypeEnum(num)
	return nil
}

// Deprecated: Use DomainTypeEnum.Descriptor instead.
func (DomainTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{5}
}

type OperationTypeEnum int32

const (
	OperationTypeEnum_OPERATION_BUY         OperationTypeEnum = 0
	OperationTypeEnum_OPERATION_BUY_RETURN  OperationTypeEnum = 1
	OperationTypeEnum_OPERATION_SELL        OperationTypeEnum = 2
	OperationTypeEnum_OPERATION_SELL_RETURN OperationTypeEnum = 3
)

// Enum value maps for OperationTypeEnum.
var (
	OperationTypeEnum_name = map[int32]string{
		0: "OPERATION_BUY",
		1: "OPERATION_BUY_RETURN",
		2: "OPERATION_SELL",
		3: "OPERATION_SELL_RETURN",
	}
	OperationTypeEnum_value = map[string]int32{
		"OPERATION_BUY":         0,
		"OPERATION_BUY_RETURN":  1,
		"OPERATION_SELL":        2,
		"OPERATION_SELL_RETURN": 3,
	}
)

func (x OperationTypeEnum) Enum() *OperationTypeEnum {
	p := new(OperationTypeEnum)
	*p = x
	return p
}

func (x OperationTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[6].Descriptor()
}

func (OperationTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[6]
}

func (x OperationTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OperationTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OperationTypeEnum(num)
	return nil
}

// Deprecated: Use OperationTypeEnum.Descriptor instead.
func (OperationTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{6}
}

type PaymentTypeEnum int32

const (
	PaymentTypeEnum_PAYMENT_CASH   PaymentTypeEnum = 0
	PaymentTypeEnum_PAYMENT_CARD   PaymentTypeEnum = 1
	PaymentTypeEnum_PAYMENT_MOBILE PaymentTypeEnum = 4
	// PaymentTypeEnum_PAYMENT_CREDIT PaymentTypeEnum = 2
	// PaymentTypeEnum_PAYMENT_TARE   PaymentTypeEnum = 3
)

// Enum value maps for PaymentTypeEnum.
var (
	PaymentTypeEnum_name = map[int32]string{
		0: "PAYMENT_CASH",
		1: "PAYMENT_CARD",
		4: "PAYMENT_MOBILE",
		// 2: "PAYMENT_CREDIT",
		// 3: "PAYMENT_TARE",
	}
	PaymentTypeEnum_value = map[string]int32{
		"PAYMENT_CASH":   0,
		"PAYMENT_CARD":   1,
		"PAYMENT_MOBILE": 4,
		// "PAYMENT_CREDIT": 2,
		// "PAYMENT_TARE":   3,
	}
)

func (x PaymentTypeEnum) Enum() *PaymentTypeEnum {
	p := new(PaymentTypeEnum)
	*p = x
	return p
}

func (x PaymentTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[7].Descriptor()
}

func (PaymentTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[7]
}

func (x PaymentTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PaymentTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PaymentTypeEnum(num)
	return nil
}

// Deprecated: Use PaymentTypeEnum.Descriptor instead.
func (PaymentTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{7}
}

type UserRoleEnum int32

const (
	UserRoleEnum_USER_ROLE_PAYMASTER       UserRoleEnum = 1 // Paymaster role
	UserRoleEnum_USER_ROLE_CHIEF_PAYMASTER UserRoleEnum = 2 // Chief paymaster role
	UserRoleEnum_USER_ROLE_ADMINISTRATOR   UserRoleEnum = 3 // Administrator role
)

// Enum value maps for UserRoleEnum.
var (
	UserRoleEnum_name = map[int32]string{
		1: "USER_ROLE_PAYMASTER",
		2: "USER_ROLE_CHIEF_PAYMASTER",
		3: "USER_ROLE_ADMINISTRATOR",
	}
	UserRoleEnum_value = map[string]int32{
		"USER_ROLE_PAYMASTER":       1,
		"USER_ROLE_CHIEF_PAYMASTER": 2,
		"USER_ROLE_ADMINISTRATOR":   3,
	}
)

func (x UserRoleEnum) Enum() *UserRoleEnum {
	p := new(UserRoleEnum)
	*p = x
	return p
}

func (x UserRoleEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRoleEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[8].Descriptor()
}

func (UserRoleEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[8]
}

func (x UserRoleEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserRoleEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserRoleEnum(num)
	return nil
}

// Deprecated: Use UserRoleEnum.Descriptor instead.
func (UserRoleEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{8}
}

type TicketAdTypeEnum int32

const (
	TicketAdTypeEnum_TICKET_AD_OFD  TicketAdTypeEnum = 0
	TicketAdTypeEnum_TICKET_AD_ORG  TicketAdTypeEnum = 1
	TicketAdTypeEnum_TICKET_AD_POS  TicketAdTypeEnum = 2
	TicketAdTypeEnum_TICKET_AD_KKM  TicketAdTypeEnum = 3
	TicketAdTypeEnum_TICKET_AD_INFO TicketAdTypeEnum = 4
)

// Enum value maps for TicketAdTypeEnum.
var (
	TicketAdTypeEnum_name = map[int32]string{
		0: "TICKET_AD_OFD",
		1: "TICKET_AD_ORG",
		2: "TICKET_AD_POS",
		3: "TICKET_AD_KKM",
		4: "TICKET_AD_INFO",
	}
	TicketAdTypeEnum_value = map[string]int32{
		"TICKET_AD_OFD":  0,
		"TICKET_AD_ORG":  1,
		"TICKET_AD_POS":  2,
		"TICKET_AD_KKM":  3,
		"TICKET_AD_INFO": 4,
	}
)

func (x TicketAdTypeEnum) Enum() *TicketAdTypeEnum {
	p := new(TicketAdTypeEnum)
	*p = x
	return p
}

func (x TicketAdTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketAdTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[9].Descriptor()
}

func (TicketAdTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[9]
}

func (x TicketAdTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TicketAdTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TicketAdTypeEnum(num)
	return nil
}

// Deprecated: Use TicketAdTypeEnum.Descriptor instead.
func (TicketAdTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{9}
}

type ElementTypeEnum int32

const (
	ElementTypeEnum_GROUP ElementTypeEnum = 0
	ElementTypeEnum_ITEM  ElementTypeEnum = 1
)

// Enum value maps for ElementTypeEnum.
var (
	ElementTypeEnum_name = map[int32]string{
		0: "GROUP",
		1: "ITEM",
	}
	ElementTypeEnum_value = map[string]int32{
		"GROUP": 0,
		"ITEM":  1,
	}
)

func (x ElementTypeEnum) Enum() *ElementTypeEnum {
	p := new(ElementTypeEnum)
	*p = x
	return p
}

func (x ElementTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_proto_enumTypes[10].Descriptor()
}

func (ElementTypeEnum) Type() protoreflect.EnumType {
	return &file_enum_proto_enumTypes[10]
}

func (x ElementTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ElementTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ElementTypeEnum(num)
	return nil
}

// Deprecated: Use ElementTypeEnum.Descriptor instead.
func (ElementTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_enum_proto_rawDescGZIP(), []int{10}
}

var File_enum_proto protoreflect.FileDescriptor

var file_enum_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6b, 0x6b,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xf2, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4d, 0x45,
	0x4e, 0x43, 0x4c, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x54, 0x49, 0x43, 0x4b,
	0x45, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x7f, 0x2a, 0x8b, 0x05, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12,
	0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0d, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0x0e, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xfe, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xff, 0x01, 0x2a, 0xb1, 0x01, 0x0a, 0x0c, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49,
	0x54, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49,
	0x54, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4e, 0x4f, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x55, 0x50, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x2a, 0x51,
	0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10,
	0x01, 0x2a, 0x2c, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x5a, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x10, 0x01, 0x2a,
	0x84, 0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x53, 0x4f, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x4f, 0x54, 0x45, 0x4c, 0x53, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x58, 0x49,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52,
	0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x2a, 0x6f, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x5f,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x52,
	0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41,
	0x52, 0x45, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x45, 0x46,
	0x5f, 0x50, 0x41, 0x59, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x10, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x5f, 0x4f, 0x46, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x5f, 0x4f, 0x52,
	0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x44,
	0x5f, 0x50, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x41, 0x44, 0x5f, 0x4b, 0x4b, 0x4d, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x2a, 0x26, 0x0a,
	0x0f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x01,
}

var (
	file_enum_proto_rawDescOnce sync.Once
	file_enum_proto_rawDescData = file_enum_proto_rawDesc
)

func file_enum_proto_rawDescGZIP() []byte {
	file_enum_proto_rawDescOnce.Do(func() {
		file_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_enum_proto_rawDescData)
	})
	return file_enum_proto_rawDescData
}

var file_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_enum_proto_goTypes = []interface{}{
	(CommandTypeEnum)(0),    // 0: kkm.proto.CommandTypeEnum
	(ResultTypeEnum)(0),     // 1: kkm.proto.ResultTypeEnum
	(ItemTypeEnum)(0),       // 2: kkm.proto.ItemTypeEnum
	(MoneyPlacementEnum)(0), // 3: kkm.proto.MoneyPlacementEnum
	(ReportTypeEnum)(0),     // 4: kkm.proto.ReportTypeEnum
	(DomainTypeEnum)(0),     // 5: kkm.proto.DomainTypeEnum
	(OperationTypeEnum)(0),  // 6: kkm.proto.OperationTypeEnum
	(PaymentTypeEnum)(0),    // 7: kkm.proto.PaymentTypeEnum
	(UserRoleEnum)(0),       // 8: kkm.proto.UserRoleEnum
	(TicketAdTypeEnum)(0),   // 9: kkm.proto.TicketAdTypeEnum
	(ElementTypeEnum)(0),    // 10: kkm.proto.ElementTypeEnum
}
var file_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enum_proto_init() }
func file_enum_proto_init() {
	if File_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enum_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enum_proto_goTypes,
		DependencyIndexes: file_enum_proto_depIdxs,
		EnumInfos:         file_enum_proto_enumTypes,
	}.Build()
	File_enum_proto = out.File
	file_enum_proto_rawDesc = nil
	file_enum_proto_goTypes = nil
	file_enum_proto_depIdxs = nil
}
