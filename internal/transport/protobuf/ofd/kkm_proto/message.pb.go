//* @file
// @brief Структуры сообщений для передачи данных.
//
// Содержит описания команд, кодов ответов и структуры-обёртки запросов и
// ответов.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: message.proto

package kkm_proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
// @brief Статус ответа сервера.
//
// Служит для определения состояния ответа сервера.
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Код ответа.
	///
	/// Тип uint32 позволяет использовать весь диапазон значений этого типа,
	/// что дает возможность не ломать бинарную совместимость при расширении
	/// набора кодов ответов. Однако для каждой конкретной версии протокола данное
	/// поле должно иметь значения из диапазона, задаваемого типом
	/// ::ResultTypeEnum.
	ResultCode *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	/// Строка ответа.
	///
	/// Строка с текстом системного характера для обработки ошибок.
	ResultText *string `protobuf:"bytes,2,opt,name=result_text,json=resultText" json:"result_text,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *Result) GetResultText() string {
	if x != nil && x.ResultText != nil {
		return *x.ResultText
	}
	return ""
}

//*
// @brief Запрос к серверу.
//
// Содержит код команды, определяющий суть запроса и данные, связанные с этим
// кодом.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Код команды.
	///
	/// Код команды из перечня доступных значений ::CommandTypeEnum.
	Command *CommandTypeEnum `protobuf:"varint,1,req,name=command,enum=kkm.proto.CommandTypeEnum" json:"command,omitempty"`
	/// Чековая транзакция.
	///
	/// Данный параметр обязателен, если Request::command == ::COMMAND_TICKET.
	Ticket *TicketRequest `protobuf:"bytes,2,opt,name=ticket" json:"ticket,omitempty"`
	/// Закрытие смены.
	///
	/// Данный параметр обязателен, если Request::command ==
	/// ::COMMAND_CLOSE_SHIFT.
	CloseShift *CloseShiftRequest `protobuf:"bytes,3,opt,name=close_shift,json=closeShift" json:"close_shift,omitempty"`
	/// Запрос отчёта.
	///
	/// Данный параметр обязателен, если Request::command == ::COMMAND_REPORT.
	Report *ReportRequest `protobuf:"bytes,4,opt,name=report" json:"report,omitempty"`
	/// Запрос номенклатуры.
	///
	/// Данный параметр обязателен, если Request::command ==
	/// ::COMMAND_NOMENCLATURE.
	Nomenclature *NomenclatureRequest `protobuf:"bytes,5,opt,name=nomenclature" json:"nomenclature,omitempty"`
	/// Служебная информация.
	///
	/// Может передаваться при Request::command == ::COMMAND_SYSTEM или совместно
	/// c другими командами.
	Service *ServiceRequest `protobuf:"bytes,6,opt,name=service" json:"service,omitempty"`
	/// Снятие/внесение наличных.
	///
	/// Данный параметр обязателен, если
	/// Request::command == ::COMMAND_MONEY_PLACEMENT.
	MoneyPlacement *MoneyPlacementRequest `protobuf:"bytes,7,opt,name=money_placement,json=moneyPlacement" json:"money_placement,omitempty"`
	/// Аутентификация кассира.
	///
	/// Данный параметр обязателен, если Request::command == ::COMMAND_AUTH.
	Auth *AuthRequest `protobuf:"bytes,8,opt,name=auth" json:"auth,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetCommand() CommandTypeEnum {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return CommandTypeEnum_COMMAND_SYSTEM
}

func (x *Request) GetTicket() *TicketRequest {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *Request) GetCloseShift() *CloseShiftRequest {
	if x != nil {
		return x.CloseShift
	}
	return nil
}

func (x *Request) GetReport() *ReportRequest {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *Request) GetNomenclature() *NomenclatureRequest {
	if x != nil {
		return x.Nomenclature
	}
	return nil
}

func (x *Request) GetService() *ServiceRequest {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Request) GetMoneyPlacement() *MoneyPlacementRequest {
	if x != nil {
		return x.MoneyPlacement
	}
	return nil
}

func (x *Request) GetAuth() *AuthRequest {
	if x != nil {
		return x.Auth
	}
	return nil
}

//*
// @brief Ответ сервера на запрос устройства.
//
// Содержит код команды, с которым устройство обращалось к серверу, и данные,
// связанные с этим кодом.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Код команды.
	///
	/// Код команды из перечня доступных значений ::CommandTypeEnum. Должен быть
	/// равным коду команды, с которым устройство обратилось к серверу.
	Command *CommandTypeEnum `protobuf:"varint,1,req,name=command,enum=kkm.proto.CommandTypeEnum" json:"command,omitempty"`
	/// Статус ответа сервера.
	///
	Result *Result `protobuf:"bytes,2,req,name=result" json:"result,omitempty"`
	/// Ответ на команду ::COMMAND_TICKET
	///
	Ticket *TicketResponse `protobuf:"bytes,3,opt,name=ticket" json:"ticket,omitempty"`
	/// Ответ на команду ::COMMAND_REPORT, COMMAND_CLOSE_SHIFT, COMMAND_INFO
	///
	Report *ReportResponse `protobuf:"bytes,4,opt,name=report" json:"report,omitempty"`
	/// Ответ на команду ::COMMAND_NOMENCLATURE
	///
	/// Содержит текущую версию номенклатуры.
	Nomenclature *NomenclatureResponse `protobuf:"bytes,5,opt,name=nomenclature" json:"nomenclature,omitempty"`
	/// Служебная информация.
	///
	/// Может передаваться как самостоятельный ответ на команду ::COMMAND_SYSTEM
	/// или совместно c ответами на другие команды.
	Service *ServiceResponse `protobuf:"bytes,6,opt,name=service" json:"service,omitempty"`
	/// Ответ на команду ::COMMAND_AUTH
	///
	Auth *AuthResponse `protobuf:"bytes,7,opt,name=auth" json:"auth,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetCommand() CommandTypeEnum {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return CommandTypeEnum_COMMAND_SYSTEM
}

func (x *Response) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Response) GetTicket() *TicketResponse {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *Response) GetReport() *ReportResponse {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *Response) GetNomenclature() *NomenclatureResponse {
	if x != nil {
		return x.Nomenclature
	}
	return nil
}

func (x *Response) GetService() *ServiceResponse {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Response) GetAuth() *AuthResponse {
	if x != nil {
		return x.Auth
	}
	return nil
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0xd2, 0x03, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x3d, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x42, 0x0a, 0x0c, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0xf9, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x6b, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x6b, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x6b, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x42, 0x02, 0x48, 0x01,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_message_proto_goTypes = []interface{}{
	(*Result)(nil),                // 0: kkm.proto.Result
	(*Request)(nil),               // 1: kkm.proto.Request
	(*Response)(nil),              // 2: kkm.proto.Response
	(CommandTypeEnum)(0),          // 3: kkm.proto.CommandTypeEnum
	(*TicketRequest)(nil),         // 4: kkm.proto.TicketRequest
	(*CloseShiftRequest)(nil),     // 5: kkm.proto.CloseShiftRequest
	(*ReportRequest)(nil),         // 6: kkm.proto.ReportRequest
	(*NomenclatureRequest)(nil),   // 7: kkm.proto.NomenclatureRequest
	(*ServiceRequest)(nil),        // 8: kkm.proto.ServiceRequest
	(*MoneyPlacementRequest)(nil), // 9: kkm.proto.MoneyPlacementRequest
	(*AuthRequest)(nil),           // 10: kkm.proto.AuthRequest
	(*TicketResponse)(nil),        // 11: kkm.proto.TicketResponse
	(*ReportResponse)(nil),        // 12: kkm.proto.ReportResponse
	(*NomenclatureResponse)(nil),  // 13: kkm.proto.NomenclatureResponse
	(*ServiceResponse)(nil),       // 14: kkm.proto.ServiceResponse
	(*AuthResponse)(nil),          // 15: kkm.proto.AuthResponse
}
var file_message_proto_depIdxs = []int32{
	3,  // 0: kkm.proto.Request.command:type_name -> kkm.proto.CommandTypeEnum
	4,  // 1: kkm.proto.Request.ticket:type_name -> kkm.proto.TicketRequest
	5,  // 2: kkm.proto.Request.close_shift:type_name -> kkm.proto.CloseShiftRequest
	6,  // 3: kkm.proto.Request.report:type_name -> kkm.proto.ReportRequest
	7,  // 4: kkm.proto.Request.nomenclature:type_name -> kkm.proto.NomenclatureRequest
	8,  // 5: kkm.proto.Request.service:type_name -> kkm.proto.ServiceRequest
	9,  // 6: kkm.proto.Request.money_placement:type_name -> kkm.proto.MoneyPlacementRequest
	10, // 7: kkm.proto.Request.auth:type_name -> kkm.proto.AuthRequest
	3,  // 8: kkm.proto.Response.command:type_name -> kkm.proto.CommandTypeEnum
	0,  // 9: kkm.proto.Response.result:type_name -> kkm.proto.Result
	11, // 10: kkm.proto.Response.ticket:type_name -> kkm.proto.TicketResponse
	12, // 11: kkm.proto.Response.report:type_name -> kkm.proto.ReportResponse
	13, // 12: kkm.proto.Response.nomenclature:type_name -> kkm.proto.NomenclatureResponse
	14, // 13: kkm.proto.Response.service:type_name -> kkm.proto.ServiceResponse
	15, // 14: kkm.proto.Response.auth:type_name -> kkm.proto.AuthResponse
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_common_proto_init()
	file_ticket_proto_init()
	file_report_proto_init()
	file_nomenclature_proto_init()
	file_service_proto_init()
	file_auth_proto_init()
	file_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
